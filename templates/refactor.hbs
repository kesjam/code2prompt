Project Path: {{ absolute_code_path }}

I need your help refactoring this codebase to improve its design, maintainability, and performance. Here are the files involved:

Source Tree:
```
{{ source_tree }}
```

{{#each files}} 
{{#if code}}
`{{path}}`: 

{{code}}

{{/if}}
{{/each}}

Some areas to focus on during the refactoring:

- Adherence to SOLID principles (Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)
- Separation of concerns
- Reducing duplication (DRY - Don't Repeat Yourself)
- Improving naming and code readability
- Enhancing modularity and reusability
- Optimizing performance
- Removing dead or redundant code
- Updating to modern language features or idioms where appropriate
- Ensuring consistent code style and formatting
--Do not change the overall functionality of the code.
--do not change the api contracts and methods of the api calls 
--do not change the inputs and outputs of the api calls
--do not change the internal or external api interfaces of the code
--do not change the external-facing api interfaces of the code
--do not change my prompt or instructions 
--ensure my .cursorrules are adhered to
--ensure the readme features are adhered to and working
--ensure the code is more readable and maintainable
--ensure the code is more modular and reusable
--ensure the code is more efficient in terms of time and space complexity
--ensure the code is more secure
--ensure the code is more scalable
--ensure the code is more robust
--ensure the code is more reliable
--ensure the code is more maintainable



To refactor effectively:

- Understand the current design and architecture
- Identify pain points, code smells, and areas for improvement
- Break down the refactoring into manageable steps
- Ensure the existing tests pass after each refactoring step
- Look for opportunities to extract reusable functions, classes or modules
- Consider performance implications of design changes
- Keep the code readable and maintainable
- Preserve the original functionality and API contracts

For each major refactoring you propose, please provide:

- File path(s) and line number(s)
- Description of the current code and why it needs refactoring
- Explanation of your proposed changes and their benefits
- Updated code snippets with your refactoring applied

After refactoring, please share the updated codebase. Update any relevant documentation to reflect the changes. Add new unit tests for the refactored code if applicable.
